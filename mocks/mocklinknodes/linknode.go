// Code generated by MockGen. DO NOT EDIT.
// Source: links/link.go

// Package mocklinknodes is a generated GoMock package.
package mocklinknodes

import (
	context "context"
	reflect "reflect"

	ns "github.com/containernetworking/plugins/pkg/ns"
	gomock "github.com/golang/mock/gomock"
	links "github.com/srl-labs/containerlab/links"
	state "github.com/srl-labs/containerlab/nodes/state"
	netlink "github.com/vishvananda/netlink"
)

// MockRawLink is a mock of RawLink interface.
type MockRawLink struct {
	ctrl     *gomock.Controller
	recorder *MockRawLinkMockRecorder
}

// MockRawLinkMockRecorder is the mock recorder for MockRawLink.
type MockRawLinkMockRecorder struct {
	mock *MockRawLink
}

// NewMockRawLink creates a new mock instance.
func NewMockRawLink(ctrl *gomock.Controller) *MockRawLink {
	mock := &MockRawLink{ctrl: ctrl}
	mock.recorder = &MockRawLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawLink) EXPECT() *MockRawLinkMockRecorder {
	return m.recorder
}

// GetType mocks base method.
func (m *MockRawLink) GetType() links.LinkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(links.LinkType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockRawLinkMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockRawLink)(nil).GetType))
}

// Resolve mocks base method.
func (m *MockRawLink) Resolve(params *links.ResolveParams) (links.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", params)
	ret0, _ := ret[0].(links.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockRawLinkMockRecorder) Resolve(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockRawLink)(nil).Resolve), params)
}

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockLink) Deploy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockLinkMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockLink)(nil).Deploy), arg0)
}

// GetEndpoints mocks base method.
func (m *MockLink) GetEndpoints() []links.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints")
	ret0, _ := ret[0].([]links.Endpoint)
	return ret0
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockLinkMockRecorder) GetEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockLink)(nil).GetEndpoints))
}

// GetType mocks base method.
func (m *MockLink) GetType() links.LinkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(links.LinkType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockLinkMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockLink)(nil).GetType))
}

// Remove mocks base method.
func (m *MockLink) Remove(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockLinkMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLink)(nil).Remove), arg0)
}

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// AddEndpoint mocks base method.
func (m *MockNode) AddEndpoint(e links.Endpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEndpoint", e)
}

// AddEndpoint indicates an expected call of AddEndpoint.
func (mr *MockNodeMockRecorder) AddEndpoint(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEndpoint", reflect.TypeOf((*MockNode)(nil).AddEndpoint), e)
}

// AddLink mocks base method.
func (m *MockNode) AddLink(l links.Link) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLink", l)
}

// AddLink indicates an expected call of AddLink.
func (mr *MockNodeMockRecorder) AddLink(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockNode)(nil).AddLink), l)
}

// AddLinkToContainer mocks base method.
func (m *MockNode) AddLinkToContainer(ctx context.Context, link netlink.Link, f func(ns.NetNS) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLinkToContainer", ctx, link, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLinkToContainer indicates an expected call of AddLinkToContainer.
func (mr *MockNodeMockRecorder) AddLinkToContainer(ctx, link, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkToContainer", reflect.TypeOf((*MockNode)(nil).AddLinkToContainer), ctx, link, f)
}

// ExecFunction mocks base method.
func (m *MockNode) ExecFunction(arg0 func(ns.NetNS) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecFunction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecFunction indicates an expected call of ExecFunction.
func (mr *MockNodeMockRecorder) ExecFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecFunction", reflect.TypeOf((*MockNode)(nil).ExecFunction), arg0)
}

// GetEndpoints mocks base method.
func (m *MockNode) GetEndpoints() []links.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints")
	ret0, _ := ret[0].([]links.Endpoint)
	return ret0
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockNodeMockRecorder) GetEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockNode)(nil).GetEndpoints))
}

// GetLinkEndpointType mocks base method.
func (m *MockNode) GetLinkEndpointType() links.LinkEndpointType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkEndpointType")
	ret0, _ := ret[0].(links.LinkEndpointType)
	return ret0
}

// GetLinkEndpointType indicates an expected call of GetLinkEndpointType.
func (mr *MockNodeMockRecorder) GetLinkEndpointType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkEndpointType", reflect.TypeOf((*MockNode)(nil).GetLinkEndpointType))
}

// GetShortName mocks base method.
func (m *MockNode) GetShortName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShortName indicates an expected call of GetShortName.
func (mr *MockNodeMockRecorder) GetShortName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortName", reflect.TypeOf((*MockNode)(nil).GetShortName))
}

// GetState mocks base method.
func (m *MockNode) GetState() state.NodeState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(state.NodeState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockNodeMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockNode)(nil).GetState))
}
